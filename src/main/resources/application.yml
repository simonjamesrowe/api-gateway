spring:
  security:
    user:
      name: webhook
      password: password
  codec:
    max-in-memory-size: 10MB

  jackson:
    serialization:
      write_dates_as_timestamps: false
  cloud:
    gateway:
      routes:
        - id: cms-json
          uri: ${cms.url}
          predicates:
            - Path=/jobs,/profiles,/tags,/blogs,/blogs/{id},/skills-groups,/social-medias
        - id: search
          uri: ${search.url}
          predicates:
            - Path=/search/**
          filters:
            - StripPrefix=1
    stream:
      bindings:
        output:
          destination: ${namespace:LOCAL}_EVENTS
          producer:
            use-native-encoding: true
            partition-count: 1
        consume-in-0:
          destination: ${namespace:LOCAL}_EVENTS
          group: api-gateway
          consumer:
            batch-mode: true
            use-native-decoding: true
      kafka:
        binder:
          brokers: ${spring.kafka.bootstrap-servers}
          consumer-properties:
            max.poll.records: 50
          auto-add-partitions: true
          replication-factor: 1
        bindings:
          default:
            consumer:
              autoCommitOnError: false
              autoCommitOffset: true
              startOffset: earliest
              headerMode: raw
          consume-in-0:
            consumer:
              configuration:
                value.deserializer: com.simonjamesrowe.model.serialization.EventDeserializer
                key.deserializer: org.apache.kafka.common.serialization.StringDeserializer
          output:
            producer:
              configuration:
                value.serializer: com.simonjamesrowe.model.serialization.EventSerializer
                key.serializer: org.apache.kafka.common.serialization.StringSerializer
  kafka:
    consumer:
      properties:
        spring.json.trusted.packages: com.simonjamesrowe.model

cms:
  url: http://localhost:8000/
search:
  url: http://localhost:8081

image:
  compressFilesLargerThanKb: 400
